
        <dashboard version="2" theme="light" hiddenElements="{&quot;hideEdit&quot;:false,&quot;hideOpenInSearch&quot;:false,&quot;hideExport&quot;:false}">
            <label>2. üìä Healthcheck monitoring</label>
            <description>This dashboard is used to track the healthcheck jobs results performed on the monitored savedsearch</description>
            <definition><![CDATA[{"visualizations":{"viz_3iNEmCMl":{"type":"splunk.singlevalue","title":"Earliest job time","description":"This is indicated the earliest job time found in the checked jobs for the given period","dataSources":{"primary":"ds_06bIo68c"},"options":{"majorValue":"> sparklineValues | lastPoint()","trendValue":"> sparklineValues | delta(-2)","sparklineValues":"> primary | seriesByName('earliest_time_readable')"}},"viz_55L9hk6F":{"type":"splunk.singlevalue","title":"Latest job time","description":"This is indicated the latest job time found in the checked jobs for the given period","dataSources":{"primary":"ds_06bIo68c"},"options":{"majorValue":"> sparklineValues | lastPoint()","trendValue":"> sparklineValues | delta(-2)","sparklineValues":"> primary | seriesByName('latest_time_readable')"}},"viz_IVegbHIE":{"type":"splunk.table","options":{"count":50,"columnFormat":{"Status":{"data":"> table | seriesByName(\"Status\") | formatByType(StatusColumnFormatEditorConfig)","rowColors":"> table | seriesByName('Status') | pick(StatusRowColorsEditorConfig)","rowBackgroundColors":"> table | seriesByName(\"Status\") | matchValue(StatusRowBackgroundColorsEditorConfig)"}}},"dataSources":{"primary":"ds_EYAbil72"},"context":{"StatusColumnFormatEditorConfig":{"string":{"unitPosition":"after"}},"StatusRowColorsEditorConfig":["#3c444d"],"StatusRowBackgroundColorsEditorConfig":[{"match":"No healthcheck job found","value":"#f4baa9"},{"match":"Found healthcheck job result","value":"#a1d59c"},{"match":"Healthcheck job in progress","value":"#eee8ce"}]}},"viz_ANhOREID":{"type":"splunk.pie","options":{"labelDisplay":"valuesAndPercentage","seriesColorsByField":{"No healthcheck job found":"#F4BAA9","Found healthcheck job result":"#A1D59C"}},"dataSources":{"primary":"ds_zE81BpRn"},"title":"Healthcheck status on the given period","description":"This is showing a statistic about all the identified jobs and their relative (or not) healthcheck job status"},"viz_Orj3SgqP":{"type":"splunk.pie","options":{"labelDisplay":"valuesAndPercentage","seriesColorsByField":{"Success ‚úÖ":"#A1D59C","Warning ‚ö†Ô∏è":"#FFD442","Healthcheck job not executed ‚ùî":"#F4BAA9"}},"dataSources":{"primary":"ds_yfm30hQt"},"title":"Scan count - Analysis results","description":"This is showing a statistic on the healthcheck result regarding the number of events that were scanned"},"viz_GSSCZghc":{"type":"splunk.pie","options":{"labelDisplay":"valuesAndPercentage","seriesColorsByField":{"Success ‚úÖ":"#A1D59C","Warning ‚ö†Ô∏è":"#FFD442","Healthcheck job not executed ‚ùî":"#F4BAA9"}},"dataSources":{"primary":"ds_Q8TOTrez_ds_yfm30hQt"},"title":"Event count - Analysis results","description":"This is showing a statistic on the healthcheck result regarding the number of events that matched the search query and retrieved from the indexers"},"viz_jgCxlh3m":{"type":"splunk.bar","options":{"stackMode":"stacked100","legendDisplay":"bottom","legendTruncation":"ellipsisMiddle","backgroundColor":"#ffffff","seriesColorsByField":{"Success":"#A1D59C","Failed":"#FF5E5E","Healthcheck job not executed":"EEE8CE"}},"dataSources":{"primary":"ds_bC8NRbrX"},"description":"This is showing a statistic on the healthcheck result regarding the number of results returned by the savedsearch","title":"Result count - Analysis results"}},"dataSources":{"ds_mkspOX2r":{"type":"ds.search","options":{"query":"index=_audit sourcetype=audittrail action=search info!=\"granted\"","queryParameters":{"earliest":"$time.earliest$","latest":"$time.latest$"},"enableSmartSources":true},"name":"ds_audittrail_jobs"},"ds_06bIo68c":{"type":"ds.chain","options":{"extend":"ds_mkspOX2r","query":"| stats min(_time) as earliest_time, max(_time) as latest_time\n| eval earliest_time_readable = strftime(earliest_time,\"%Y-%m-%d at %H:%M:%S\"), latest_time_readable = strftime(latest_time,\"%Y-%m-%d at %H:%M:%S\")","enableSmartSources":true},"name":"ds_healthcheck_min_max_time"},"ds_3L6nMIog":{"type":"ds.search","options":{"query":"``` Search 1: Get all monitored savedsearches jobs ```\r\n(index=_audit sourcetype=audittrail action=search savedsearch_name!=\"\" info!=\"granted\" [| inputlookup detection_backfill_savedsearch_monitoring | table app, savedsearch | rename savedsearch as savedsearch_name])\r\nOR\r\n``` Search 2: Get all jobs that were executed as an healthcheck job ```\r\n(index=_audit sourcetype=audittrail action=search info!=\"granted\" [search (index=_* OR index=cim_*) sourcetype=\"modular_alerts:detection_backfill*\" TERM(\"CAA-RHMS-040\") latest=now | rex field=_raw \"Healthcheck job for sid_origin '(?<sid_origin>[^']+)' for the savedsearch '(?<app>[^\\/]+)\\/(?<savedsearch>[^']+)' was dispatched. SID of the healthcheck job is '(?<sid_healthcheck>[^']+)'. First job was run at '(?<time_origin>[^']+)' .* with an original scan count was '(?<origin_scan_count>[^']+)', event count was '(?<origin_event_count>[^']+)' and result count was '(?<origin_result_count>[^']+)'\" | search time_origin>$ds_healthcheck_min_max_time:result.earliest_time$ and time_origin<$ds_healthcheck_min_max_time:result.latest_time$ | table sid_healthcheck | eval sid_healthcheck = \"'\"+sid_healthcheck+\"'\" | rename sid_healthcheck as \"search_id\"])\r\nOR \r\n``` Search 3: Get all logs generated by the Detection Backfill app which help us to link an original job to its healthcheck one ```\r\n((index=_* OR index=cim_*) sourcetype=\"modular_alerts:detection_backfill*\" TERM(\"CAA-RHMS-040\") latest=now) \r\n| rex field=_raw \"Healthcheck job for sid_origin '(?<sid_origin>[^']+)' for the savedsearch '(?<app>[^\\/]+)\\/(?<savedsearch>[^']+)' was dispatched. SID of the healthcheck job is '(?<sid_healthcheck>[^']+)'. First job was run at '(?<time_origin>[^']+)' .* with an original scan count was '(?<origin_scan_count>[^']+)', event count was '(?<origin_event_count>[^']+)' and result count was '(?<origin_result_count>[^']+)'\"\r\n| eval search_id = if(isnotnull(search_id),replace(search_id,\"'\",\"\"),null()), search_id1 = coalesce(search_id, sid_healthcheck), search_id2 = coalesce(search_id, sid_origin), signature=sha1(sid_origin+sid_healthcheck)\r\n| eventstats values(signature) as signature, values(sid_healthcheck) as job_healthcheck by search_id1\r\n| eventstats values(signature) as signature, values(sid_origin) as job_origin by search_id2\r\n| eval signature = if(isnull(signature),search_id,signature), time_origin = coalesce(time_origin,_time), savedsearch = coalesce(savedsearch, savedsearch_name)\r\n| eval new_scan_count = if(isnotnull(job_healthcheck),scan_count,null()), new_event_count = if(isnotnull(job_healthcheck),event_count,null()), new_result_count = if(isnotnull(job_healthcheck),result_count,null())\r\n| stats values(sourcetype) as sourcetypes, min(time_origin) as _time, values(search_id) as search_id, values(sid_origin) as sid_origin, values(app) as app, values(savedsearch) as savedsearch, values(origin_scan_count) as origin_scan_count, values(origin_event_count) as origin_event_count, values(origin_result_count) as origin_result_count, values(sid_healthcheck) as sid_healthcheck, values(new_scan_count) as new_scan_count, values(new_event_count) as new_event_count, values(new_result_count) as new_result_count by signature\r\n| eval ok = \"‚úÖ\", nok = \"‚ùå\", warning = \"‚ö†Ô∏è\", question = \"‚ùî\"\r\n| eval sids = if(isnotnull(sid_healthcheck),mvappend(\"Original job: \"+if(len(sid_origin)>25,substr(sid_origin,0,10)+\"(...)\"+substr(sid_origin,len(sid_origin)-15),sid_origin),\"Healthcheck job: \"+if(len(sid_healthcheck)>25,substr(sid_healthcheck,0,10)+\"(...)\"+substr(sid_healthcheck,len(sid_healthcheck)-15),sid_healthcheck)),\"Original job: \"+if(len(search_id)>25,substr(search_id,0,10)+\"(...)\"+substr(search_id,len(search_id)-15),search_id)), scan_count = if(isnotnull(origin_scan_count),origin_scan_count+\" vs \"+new_scan_count,new_scan_count+\" vs ?\")+\": \"+case(isnull(origin_scan_count),question,origin_scan_count!=new_scan_count,warning,1==1,ok), event_count = if(isnotnull(origin_event_count),origin_event_count+\" vs \"+new_event_count,new_event_count+\" vs ?\")+\": \"+case(isnull(origin_event_count),question,origin_event_count!=new_event_count,warning,1==1,ok), result_count = if(isnotnull(origin_result_count),origin_result_count+\" vs \"+new_result_count,new_result_count+\" vs ?\")+\": \"+case(isnull(origin_result_count),question,origin_result_count!=new_result_count,nok,1==1,ok), status = if(isnotnull(sid_healthcheck),\"Found healthcheck job\",\"No healthcheck job found\")\r\n| where mvcount(sids)>1 OR match(sids,\"^Original job\")\r\n| table _time, app, savedsearch, sids, status, scan_count, event_count, result_count\r\n| sort 0 -_time\r\n| rename app as App, savedsearch as Savedsearch, sids as SIDs, status as Status, scan_count as \"Scan count (Original vs Healthcheck)\", event_count as \"Event count (Original vs Healthcheck)\", result_count as \"Result count (Original vs Healthcheck)\"","enableSmartSources":true,"queryParameters":{"earliest":"$time.earliest$","latest":"$time.latest$"}},"name":"ds_healthcheck_results_old_v1"},"ds_d45XR29L":{"type":"ds.search","options":{"query":"``` Search 1: Get all jobs ```\r\n(index=_audit sourcetype=audittrail action=search info!=\"granted\")\r\nOR\r\n``` Search 2: Get all logs generated by the Detection Backfill app which help us to link an original job to its healthcheck one ```\r\n((index=_* OR index=cim_*) sourcetype=\"modular_alerts:detection_backfill*\" TERM(\"CAA-RHMS-040\") latest=now)\r\n``` Identify all jobs ran by a savedsearch which is monitored ```\r\n| lookup detection_backfill_savedsearch_monitoring app savedsearch as savedsearch_name OUTPUT enabled as monitored_savedsearch\r\n| rex field=_raw \"Healthcheck job for sid_origin '(?<sid_origin>[^']+)' for the savedsearch '(?<app>[^\\/]+)\\/(?<savedsearch>[^']+)' was dispatched. SID of the healthcheck job is '(?<sid_healthcheck>[^']+)'. First job was run at '(?<time_origin>[^']+)' .* with an original scan count was '(?<origin_scan_count>[^']+)', event count was '(?<origin_event_count>[^']+)' and result count was '(?<origin_result_count>[^']+)'\"\r\n``` Remove unwanted events ```\r\n| where origin_scan_count!=\"new_scan_count\" OR isnull(origin_scan_count)\r\n| eval type = case(isnotnull(monitored_savedsearch),\"original job\",isnotnull(result_count),\"other job\",isnotnull(sid_healthcheck),\"healthcheck log\",1==1,\"unknown\"), time_healthcheck = if(isnotnull(sid_healthcheck),_time,null())\r\n| eval search_id = if(isnotnull(search_id),replace(search_id,\"'\",\"\"),null()), search_id1 = coalesce(search_id, sid_healthcheck), search_id2 = coalesce(search_id, sid_origin), signature=sha1(sid_origin+sid_healthcheck)\r\n| eventstats values(signature) as signature, values(sid_healthcheck) as job_healthcheck by search_id1\r\n| eventstats values(signature) as signature, values(sid_origin) as job_origin by search_id2\r\n| eval signature = if(isnull(signature),search_id,signature), time_origin = coalesce(time_origin,_time), savedsearch = coalesce(savedsearch, savedsearch_name)\r\n| eval origin_scan_count = if(type==\"original job\",scan_count,null()), origin_event_count = if(type==\"original job\",event_count,null()), origin_result_count = if(type==\"original job\",result_count,null()), new_scan_count = if(type==\"other job\",scan_count,null()), new_event_count = if(type==\"other job\",event_count,null()), new_result_count = if(type==\"other job\",result_count,null())\r\n| stats values(sourcetype) as sourcetypes, values(time_healthcheck) as time_healthcheck, min(time_origin) as time_origin, values(search_id) as search_id, values(sid_origin) as sid_origin, values(app) as app, values(savedsearch) as savedsearch, values(origin_scan_count) as origin_scan_count, values(origin_event_count) as origin_event_count, values(origin_result_count) as origin_result_count, values(sid_healthcheck) as sid_healthcheck, values(new_scan_count) as new_scan_count, values(new_event_count) as new_event_count, values(new_result_count) as new_result_count, values(monitored_savedsearch) as monitored_savedsearch by signature\r\n| where match(app,\"$filter_app$\") AND match(savedsearch,\"$filter_savedsearch$\")\r\n| eval delta = time_healthcheck-time_origin, delta_readable = if(delta>3600,tostring(round(delta/3600))+\"h \",\"\")+tostring(round((delta%3600)/60))+\"min\", sids = if(isnotnull(sid_healthcheck),mvappend(\"Original job: \"+if(len(sid_origin)>25,substr(sid_origin,0,10)+\"(...)\"+substr(sid_origin,len(sid_origin)-15),sid_origin),\"Healthcheck job: \"+if(len(sid_healthcheck)>25,substr(sid_healthcheck,0,10)+\"(...)\"+substr(sid_healthcheck,len(sid_healthcheck)-15),sid_healthcheck),\"Healthcheck performed after \"+delta_readable),\"Original job: \"+if(len(search_id)>25,substr(search_id,0,10)+\"(...)\"+substr(search_id,len(search_id)-15),search_id)), scan_count = if(isnotnull(new_scan_count),origin_scan_count+\" vs \"+new_scan_count,origin_scan_count+\" vs ?\")+\": \"+case(isnull(new_scan_count),\"question\",origin_scan_count!=new_scan_count,\"warning\",1==1,\"ok\"), event_count = if(isnotnull(new_event_count),origin_event_count+\" vs \"+new_event_count,origin_event_count+\" vs ?\")+\": \"+case(isnull(new_event_count),\"question\",origin_event_count!=new_event_count,\"warning\",1==1,\"ok\"), result_count = if(isnotnull(new_result_count),origin_result_count+\" vs \"+new_result_count,origin_result_count+\" vs ?\")+\": \"+case(isnull(new_result_count),\"question\",origin_result_count!=new_result_count,\"nok\",1==1,\"ok\"), status = case(isnotnull(sid_healthcheck) and isnotnull(scan_count),\"Found healthcheck job result\",isnotnull(sid_healthcheck),\"Healthcheck job in progress\",1==1,\"No healthcheck job found\")\r\n| where (mvcount(sids)>1 AND isnotnull(scan_count)) OR monitored_savedsearch==1\r\n| table time_origin, app, savedsearch, sids, status, scan_count, event_count, result_count\r\n| sort 0 -time_origin ","enableSmartSources":true,"queryParameters":{"earliest":"$time.earliest$","latest":"$time.latest$"}},"name":"ds_healthcheck_results"},"ds_EYAbil72":{"type":"ds.chain","options":{"extend":"ds_d45XR29L","enableSmartSources":true,"query":"| eval ok = \"‚úÖ\", nok = \"‚ùå\", warning = \"‚ö†Ô∏è\", question = \"‚ùî\"\r\n| eval scan_count = replace(scan_count,\"ok\",ok), scan_count = replace(scan_count,\"warning\",warning), scan_count = replace(scan_count,\"question\",question), event_count = replace(event_count,\"ok\",ok), event_count = replace(event_count,\"warning\",warning), event_count = replace(event_count,\"question\",question), result_count = replace(result_count,\"nok\",nok), result_count = replace(result_count,\"ok\",ok), result_count = replace(result_count,\"question\",question)\r\n| fields - ok nok warning question\r\n| eval time_origin = strftime(time_origin,\"%Y-%m-%d %H:%M:%S (%z)\")\r\n| rename time_origin as \"Original job time\", app as App, savedsearch as Savedsearch, sids as Information, status as Status, scan_count as \"Scan count (Original vs Healthcheck)\", event_count as \"Event count (Original vs Healthcheck)\", result_count as \"Result count (Original vs Healthcheck)\""},"name":"ds_healthcheck_results_formatted"},"ds_zE81BpRn":{"type":"ds.chain","options":{"extend":"ds_d45XR29L","query":"| stats count by status"},"name":"ds_healthcheck_results_stats_status"},"ds_yfm30hQt":{"type":"ds.chain","options":{"enableSmartSources":true,"extend":"ds_d45XR29L","query":"| eval ok = \"‚úÖ\", nok = \"‚ùå\", warning = \"‚ö†Ô∏è\", question = \"‚ùî\"\n| eval scan_count = case(match(scan_count,\"ok$\"),\"Success ok\",match(scan_count,\"warning$\"),\"Warning warning\",match(scan_count,\"question$\"),\"Healthcheck job not executed question\",1==1,scan_count)\n| eval scan_count = replace(scan_count,\"ok\",ok), scan_count = replace(scan_count,\"warning\",warning), scan_count = replace(scan_count,\"question\",question)\n| fields - ok nok warning question\n| stats count by scan_count"},"name":"ds_healthcheck_results_stats_scan"},"ds_Q8TOTrez_ds_yfm30hQt":{"type":"ds.chain","options":{"enableSmartSources":true,"extend":"ds_d45XR29L","query":"| eval ok = \"‚úÖ\", nok = \"‚ùå\", warning = \"‚ö†Ô∏è\", question = \"‚ùî\"\r\n| eval event_count = case(match(event_count,\"ok$\"),\"Success ok\",match(event_count,\"warning$\"),\"Warning warning\",match(event_count,\"question$\"),\"Healthcheck job not executed question\",1==1,event_count)\r\n| eval event_count = replace(event_count,\"ok\",ok), event_count = replace(event_count,\"warning\",warning), event_count = replace(event_count,\"question\",question)\r\n| fields - ok nok warning question\r\n| stats count by event_count"},"name":"ds_healthcheck_results_stats_event"},"ds_kXMTJl8C_ds_Q8TOTrez_ds_yfm30hQt":{"type":"ds.chain","options":{"enableSmartSources":true,"extend":"ds_d45XR29L","query":"| eval ok = \"‚úÖ\", nok = \"‚ùå\", warning = \"‚ö†Ô∏è\", question = \"‚ùî\"\r\n| eval result_count = case(match(result_count,\"nok$\"),\"Failed nok\",match(result_count,\"ok$\"),\"Success ok\",match(result_count,\"question$\"),\"Healthcheck job not executed question\",1==1,result_count)\r\n| eval result_count = replace(result_count,\"nok\",nok), result_count = replace(result_count,\"ok\",ok), result_count = replace(result_count,\"question\",question)\r\n| fields - ok nok warning question\r\n| stats count by result_count"},"name":"ds_healthcheck_results_stats_result"},"ds_bC8NRbrX":{"type":"ds.chain","options":{"enableSmartSources":true,"extend":"ds_d45XR29L","query":"| eval result_count = case(match(result_count,\"nok$\"),\"nok\",match(result_count,\"ok$\"),\"ok\",match(result_count,\"question$\"),\"question\",1==1,result_count)\r\n| stats count(eval(result_count==\"ok\")) as \"Success\", count(eval(result_count==\"nok\")) as \"Failed\", count(eval(result_count==\"question\")) as \"Healthcheck job not executed\", by savedsearch\r\n| where savedsearch!=\"\""},"name":"ds_healthcheck_results_chart_results_by_savedsearch"}},"defaults":{"dataSources":{"ds.search":{"options":{"queryParameters":{"latest":"$global_time.latest$","earliest":"$global_time.earliest$"}}}}},"inputs":{"input_global_trp":{"type":"input.timerange","options":{"token":"time","defaultValue":"-4h@m,now"},"title":"Time"},"input_QQhQZ19T":{"options":{"defaultValue":".*","token":"filter_app"},"title":"[Filter] App","type":"input.text"},"input_j5EySBS5":{"options":{"defaultValue":".*","token":"filter_savedsearch"},"title":"[Filter] Savedsearch","type":"input.text"}},"layout":{"type":"grid","options":{"gutterSize":10},"structure":[{"item":"viz_ANhOREID","type":"block","position":{"x":0,"y":0,"w":1200,"h":302}},{"item":"viz_Orj3SgqP","type":"block","position":{"x":0,"y":302,"w":633,"h":315}},{"item":"viz_jgCxlh3m","type":"block","position":{"x":0,"y":617,"w":1200,"h":530}},{"item":"viz_3iNEmCMl","type":"block","position":{"x":0,"y":1147,"w":600,"h":99}},{"item":"viz_IVegbHIE","type":"block","position":{"x":0,"y":1246,"w":1200,"h":1618}},{"item":"viz_55L9hk6F","type":"block","position":{"x":600,"y":1147,"w":600,"h":99}},{"item":"viz_GSSCZghc","type":"block","position":{"x":633,"y":302,"w":567,"h":315}}],"globalInputs":["input_global_trp","input_QQhQZ19T","input_j5EySBS5"]},"description":"This dashboard is used to track the healthcheck jobs results performed on the monitored savedsearch","title":"2. üìä Healthcheck monitoring"}]]></definition>
            <assets><![CDATA[{}]]></assets>
        </dashboard>