
[Run the next scheduled detection backfill]
action.detection_backfill_run_the_next_backfill = 1
alert.severity = 1
alert.suppress = 0
alert.track = 0
counttype = number of events
cron_schedule = */5 * * * *
description = This search is used to execute the next scheduled detection backfill setup in the backlog. The number of results of this search is indicating how many tasks must be processed each time the savedsearch is run.
dispatch.earliest_time = -1h
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
search = | makeresults count=2

[Healthcheck: Get executed jobs of monitored savedsearches and add them in the backlog]
action.detection_backfill_add_a_healthcheck_task_to_the_backlog = 1
alert.suppress = 0
alert.track = 0
counttype = number of events
cron_schedule = */5 * * * *
description = This alert is used to analyze and get all jobs that have been run by the savedsearches over the given period to initialize a healthcheck by adding them in the backlog
dispatch.earliest_time = -365min
dispatch.latest_time = -360min
enableSched = 1
quantity = 0
relation = greater than
search = index=_audit sourcetype=audittrail action=search savedsearch_name!="" info!="granted" [| inputlookup detection_backfill_savedsearch_monitoring | table app, savedsearch | rename savedsearch as savedsearch_name]\
| table exec_time, search_id, app, savedsearch_name, search_et, search_lt, scan_count, event_count, result_count

[Get advanced executed and monitored savedsearches jobs (original and healthcheck)]
action.detection_backfill_index_results_from_sid = 1
alert.suppress = 0
alert.track = 0
counttype = number of events
cron_schedule = */5 * * * *
description = This alert is used to analyze and get all jobs (original and healtcheck jobs) of advanced monitored savedsearch to analyze the results content
dispatch.earliest_time = -6min@min
dispatch.latest_time = -1min@min
enableSched = 1
quantity = 0
relation = greater than
search = (index=_audit sourcetype=audittrail action=search savedsearch_name!="" info!="granted" [| inputlookup detection_backfill_savedsearch_monitoring | where advanced==1 | table app, savedsearch | rename savedsearch as savedsearch_name])\
OR\
(index=_audit sourcetype=audittrail action=search info!="granted" [search (`get_detection_backfill_events` type=healthcheck:job_dispatched latest=now)\
| rename "jobs.healthcheck.sid" as sid_healthcheck, "jobs.origin.sid" as sid_origin, "jobs.origin.scan_count" as origin_scan_count, "jobs.origin.event_count" as origin_event_count, "jobs.origin.result_count" as origin_result_count, "jobs.origin.timestamp" as time_origin | eval search_id = "'"+sid_healthcheck+"'" | table search_id])\
OR \
(`get_detection_backfill_events` type=healthcheck:job_dispatched latest=now)\
| rename "jobs.healthcheck.sid" as sid_healthcheck, "jobs.origin.sid" as sid_origin, "jobs.origin.scan_count" as origin_scan_count, "jobs.origin.event_count" as origin_event_count, "jobs.origin.result_count" as origin_result_count, "jobs.origin.timestamp" as time_origin\
| eval search_id = if(isnotnull(sid_healthcheck),"'"+sid_healthcheck+"'",search_id), orig_app = if(isnotnull(sid_healthcheck),app,null()), orig_savedsearch = if(isnotnull(sid_healthcheck),savedsearch_name,null())\
| eventstats values(orig_app) as app, values(orig_savedsearch) as savedsearch_name by search_id\
``` Identify all jobs ran by a savedsearch which is monitored ```\
| lookup detection_backfill_savedsearch_monitoring app savedsearch as savedsearch_name OUTPUT enabled as monitored_savedsearch, advanced as monitored_savedsearch_advanced\
| search exec_time=* AND monitored_savedsearch_advanced=1\
| table search_id
